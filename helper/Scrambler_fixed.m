function Scrambler_fixed(nBlocks, fixedScram)% Adapted from Scrambler() function (written by GAA).% Rather than performing a different random scramble on each of the images% looped through, scramble is pre-specified, so that the same scrambling is% applied to all images in the specified directory. % Particularly useful when scrambling videos (if each frame is scrambled% according to a different random permutation, pretty overwhelming).% inputs:    % nBlocks: # of blocks you want to carve the image into before    % scrambling them        % fixedScram: pre-specified random permutation (e.g., randperm(nBlocks     % * nBlocks)% function [value] = MatlabTemplate(input)% George Alvarez: alvarez@mit.edu% Version: 1.0% Last Modified: 06.22.2005 %% Input Variables % "input" is the input% % =========================================================================% %% Return Values % value = output %% =========================================================================%%% Purpose (what this function does) % Blah blah%% =========================================================================%% Outline%% This function is broken down into 2 main steps% 1. initialize some variables% 2. xx% % =========================================================================%'\\Pascal.mit.edu\cvcl\DATABASE\forFMRI\ImageDir_Localizers\Objects-Gray'% STEP 1. Initialize Some Variables =======================================d.home          = pwd;d.scrambled     = [pwd filesep 'Scrambled Images'];d.originals     = [pwd filesep 'Original Images'];% =========================================================================% STEP 2. xx ==============================================================cd(d.originals);fileRecord.imageFiles = dir('*.jpg');        % get jpg file namesnumImages = size(fileRecord.imageFiles,1);   % number of image filescd(d.home);% =========================================================================% STEP 3. xx ==============================================================figure();if (numImages > 0)    for i=1:numImages                % disp(['Scrambling Image ' num2str(i) ' of ' num2str(numImages)]);                % read in image        imageArray      = double(imread([d.originals filesep fileRecord.imageFiles(i).name]));          [nRows nCols nColors]   = size(imageArray); % size of image in pixels        gridW           = nCols/nBlocks;        gridH           = nRows/nBlocks;                % divide into a subset of rects        origRect=[];        for r=1:(nRows/nBlocks):nRows            for c=1:(nCols/nBlocks):nCols                 origRect{end+1} = round([max(r,1) max(c,1) min(r+gridH,nRows) min(c+gridW,nCols)]);             end        end                % scramble        scramArray      = imageArray;        scram           = fixedScram; % randperm(nBlocks*nBlocks); % LT change from original                for b = 1:nBlocks*nBlocks                        ol      = origRect{b}(1);            ot      = origRect{b}(2);            or      = origRect{b}(3);            ob      = origRect{b}(4);            rows    = or-ol+1;            cols    = ob-ot+1;                        sl   = origRect{scram(b)}(1);            st   = origRect{scram(b)}(2);            sr   = origRect{scram(b)}(3);            sb   = origRect{scram(b)}(4);            a=size(scramArray(ot:ob,ol:or,:));            b=size(imageArray(st:sb,sl:sr,:));            scramArray(ot:ob,ol:or,:) = imresize(imageArray(st:sb,sl:sr,:),[cols rows]);            end                subplot(1,2,1);        imshow(imageArray/255);                subplot(1,2,2);        imshow(scramArray/255);                imwrite(uint8(scramArray), [d.scrambled filesep fileRecord.imageFiles(i).name(1:end-4) '.jpg'], 'jpg');            endelse    disp('Error: No .jpg images found in this directory.');end